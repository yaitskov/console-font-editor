	Сложность проекта низкая. Его вполне можно быстро написать на С.
Но так как основная приследуемая задач - обучение, практика писания на С++ и
применение методов ООП, поэтому я буду писать на С++.
	Для реализации псевдо-графического интерфейса будет использована 
библиотека ncurser. Переодические события и вызов внешник программ API Linux.
	Основная сложность проекта заключается в создании графического оконного
интерфейса. Для этого я буду использовать ООП.
	В этом GUI все множество объектов графического интерфейса будет иметь 
одного общего предка - абстрактный класс IOutline. Класс контур сформирует 
единый интерфейс для всех графических объектов - правила взаимодействия между
объектами. Сам интерфейс описывается далее. 
	У IOutline есть два потомка: Panel и LinkManager - панель и менеджер 
компоновки. Классы производные от Panel нужно рассматривать как маленькие
терминалы - символные матрицы. Их задача отображать информацию. Они не могут
иметь подчиненных объектов. А классы производные от LinkManager на оборот
обязательно должны иметь как минимум один или более подчиненных объектов.
Этими объектами могут быть как другие МК так и объекты являющиеся Panel.
Единственная задача МК обеспечение взаимодействия объектов GUI: реализация
пространственных отношений и передача управления. 
	Все объекты равноправны и могут игнорировать любые команды, а объекты
инициаторы всегда должны мириться с этим. При этом отказывающий объект всегда 
уведомляет о своем решении.
	Теперь необходимо подробно описать виды взаимодействия объектов.
		1) пространственные отношения, к ним относятся сохранение
		   пропорций группы объектов при изменении размеров одного 
		   из объектов будь то объект содержащий эту группу(главный)
		   или один из подчиненных.
		2) передача управления - активная панель ввода передает
		   фокус другой панели ввода или получает отказ от всех
		   панелей ввода. Передача упраления может производиться по
		   идентификатору конкретной панели или последовательно 
		   очередной панели ввода. В каждый момент времени 
		   иметь фокус может только одна панель ввода.
	В первом случае объект работает только с объектами связанными с ним 
непосредственно: главный объект и подчиненные на прямую(если МК). Допустим
объект ходчет изменить свой размер. Если он увеличивается тогда он спрашивает
разрешения главного объекта, а затем уведомляет подчиненные и наоборот если
уменьшается: задействует возможности подчиненных объектов и уведомляет главный.
Соседи этого объекта начинают работать идентично и рекурсивно. Пример. У МК 
несколько контуров ввиде строки один из них хочет увеличить свои размеры. Тогда
МК попытается увеличить свои размеры и подогнать размеры соседнего контура 
чтобы заполнить пустоту. За пустые промежутки между подчинеными объектами
принадлежащими одному и тому же главному объекту отвечает главный объект.
	Во второй виде взаимодействия. Последовательная и индексная передачи 
управления требуют наличия сети панелей ввода, в виде 
дерева. В котором листьями являются панели ввода, а внутренними узлами МК.
Все объекты МК и панели ввода будут разделять словарь в котором ключом являетя
название (идентификатор) панели ввода. Панель может не иметь записи в этом
словаре. Значением будет являться список, описывающий путь от корня до этой
панели ввода, состоящий из порядковых номеров вершин, относительно прямого 
предка вершины. Структуры данных необходимые для индексного поиска определены.
Алгоритм. Объект передающий фокус получает значение(адрес получаеля) по индексу.
Выходит из главной функции объекта и возвращает управление, владеющему им, МК.
Функция возвращает адрес получателя фокуса. МК сравнивает свой адрес с 
полученным если его адрес является началом адреса получателя тогда МК
передает управление подчиненному объекту, под номером который находится в
первом числе оставшегося адреса, с аргументом - не прочитанная часть адреса.
Но так как получатель может отказаться от фокуса, тогда для возврата фокуса
необходимо адрес отправителя относительно получаетля. Поэтому обратный адрес
генерируется в процессе поиска получателя, постеменно.
	Для организации последовательной передачи фокуса каждый экземпляр
МК предоставляет возможность определить существование в нем прямо или косвено
хотя бы одной панели ввода, а внутри хранит номер подчиненного контура 
которому передан фокус, если является панельню ввода или содержит её. Если нет
тогда номер увеличивается на 1 и проверка повторяется. Если окажется что
этот номер больше или равен числу подчиненных контуров тогда произойдет 
передача управления выше, а счетчик обнулиться (нумерация с нуля). Последний 
вариант  - найдена очередная панель ввода но она не может принять фокус. Тогда
она передачет его далее.
	Зачем всё это нужно? Я о дереве и связанных с ним проблемами, а потому
что другого способа не существует избавиться от переполнения программного 
стека. Если использовать просто разделяемую таблицу где в качестве значений
используются указатели на панели ввода тогда при передаче управления стек
всегда будет расти. В интерфейсе эта память абсолютно не нужна. При моемом
подходе происходит следующие: просле создания дерева объектов GUI, достижение
одной из панелей ввода происходит по команде сверху от главного для все МК.
Данная библиотека расчитана на то что только с её помощью будет производиться
диалог с пользователем тогда в каждой программе её использующей, дерево GUI
должно содержать как минимум одну панель ввода. 
	Ещё особый случай уничтожение объекта GUI. Если это МК тогда он
уничтожает подчитенные ему объекты (немогут отказаться). Деструктор контура
сообщает главному о своем уничтожении и выполняет деструкцию себя.

	Тонкости реализации. У меня возникло несколько вопросов по некоторым
действиям, поэтому я их подробно опишу до реализации в исходниках.

     1) проприсовка, обновление экрана когда это нужно делать, чтобы
	делать это один раз.
     2) устранение циклической зависимости - объект сообщает МК, что изменил 
	размеры и МК изменяет размеры подчиненных объектов, а эти подчиненные
	объекты требуют увеличения размера у главного МК.
     3) быстрый доступ к подчиненным объектам и гибкая адресация.
     4) контроль ввода. Каждая панель ввода должна настраивать его под себя:
	блокируемый/неблокируемый ввода, эхосопровождение и т.д.
	Ответы:

     1) Перерисовка - процесс приведения состояния экрана в соответствие с
	его моделью. Все возможные причины перерисовки: уменьшение/увеличение
	размера или перемещение объекта GUI. Я считаю что перерисовку нужну
	начинать с вызова метода IOutline.paint() у МК из множества тех МК-ки
	в пределах которых происходят все изменения, но при этот МК имеет
	максимальную глубину в дереве из всех МК-и этого множества. Время
	вызова - после возврата в метод выбранного МК из методов объектов
	где были произведены расчеты новых границ объектов. Поддерево перешло
	в устойчивое состояние теперь можно отразить это на экране. Выбранный
	МК вызывает методы перерисовки все своих примых подчинных объектов, а
	те поступают аналогично.
     2) Такая зависимость действительно существует. МК увеличил свои размеры,
	уведомляет об этом остальные прямоподчиненные контуры, которые при 
	увеличении уведомляют МК. Поэтому МК должен игнорировать уведомления
	об изменении размеров подчинеными контурами. От сюда следует
	ограничение - библиотека не поддерживает реентерабельность. Новый
	размер контура не всегда строго больше или меньше старого, так как
	например высота может стать больше а ширина меньше. Тогда действуют
	оба правила, в следующем порядке: при увеличении, а затем при 
	уменьшении.
     3) Для достижения это цели придется пожертвовать скоростью 
	вставки/удаления объектов из дерева так как придеться изменять маршруты
	всех объектов которые находятся на одном уровне с вставляемым/удаляемым
	объектом и маршруты подчиенных им объектов явно или косвенно. На
	производительно это сильно не отразиться потому что в консольных
	программам много контуров не разместиш, да и вставка явление,
	которое происходит на порядок реже чем передача управления.
     4) Точка получения информации одна и одновременно используется только
	одной панелью ввода. В таком случае можно определить что фокусом будет
	являться как раз этот объект - кто им владее тот управляет программой.
	Перегрузив конструктор копирования и оператор присвоения можно будет 
	запретить существование более одного объекта в процессе. Для быстрой
	и удобной настройки фокуса ввсести объекты конфигруации. Для каждой
	панели ввода по экземпляру, чтобы панели ввода сохраняли и 
	восстанавливали необходимые им конфигурации. Сначала я так и подумал,
	но это не правильно. Существует более гибкий вариант. Пусть в 
	графической библиотеке не будет полноценных графических объектов, а
	лишь заготовки, которые будут чистыми панелями ввода или вывода.
	Например: панели вывода - битовая карта, метка ... ; панели ввода
	( с каждым классом связан константная конфигурация: блокируемый/
	не блокируемый ввод, эхоспровождение и т.д.). А конкретные, полноценные
	панели ввода будет создовать пользователь, путем множественного
	наследования от панели ввода и вывода, наполняя этоти классы логикой.
	Пример - минибуфер команд (получен от панели ввода для текста и 
	метки) или монохромное полотно (получено от панели ввода клавиш и
	битовой карты).

	Предварительное описание основной компоненты проекта - библиотеки GUI
закончено. Предлагаю первый вариант интерфейса IOutline.
	protected:
		IOutline * father;
	public:
		//перерисовка контура и его подчиненных 
		virtual void paint() = 0 ;
		/*небольшое расхождение относительно описанного ниже - флаг
		блокировки в главном МК не используется. Теперь если вызывается
		main_new_size(...) тогда подчинные не спрашивают главного при
		выполнении алгоритма изменения размера, но по прежнему могут 
		отказаться.*/
		virtual bool new_size(const Size&  n_size) = 0;
		virtual void new_position(const Point& n_pos) = 0;
		/*эта функция вызывается подчиненным объектом у главного*/
		virtual bool new_size(const IOutline* subordinate,
			const Size& s)  = 0;
		//необходим вирутальный деструктор
		virtual ~IOutline() = 0;
	Панели ввода могут получать и передавать управление, но учавствуют 
в его также все МК-и. Поэтому их нужно объединить одним интерфейсом
входа в объект - IItemGUITree. Для его формирования перечислю возможные 
варианты выхода из объекта:
     1) объект панель ввода - передает управление последовательно
     2) объект панель ввода - передает управление по адресу
     3) объект панель ввода - отвергает отказывается от фокуса
     4) МК - учавствует в передае управления о одной из уже указанных причин
 	seq_index - определяет способ передачи управления
	direct 	  - хранит прямой и обратные адреса
	public: 
		bool Enter(bool& seq_index, InPanelAddress& direct, 
			InPanelAddress& back);
		
void lessZero( int _, const Exception& e) const {
	if(_ < 0 ) throw e;
}


